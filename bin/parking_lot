#!/usr/bin/env node

const readline = require('readline');
const Table = require('cli-table');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
});

function executeData(data) {
    const spliData = data.split(' ');
    if (spliData.length === 1) {
        checkSingleArgument(spliData[0]);
    } else {
        checkMultipleArguments(spliData);
    }
}

if (process.argv.length < 3) {
    rl.on('line', function(cmd) {
        executeData(cmd);
    });
} else {
    const fs = require('fs'),
        filename = process.argv[2];
    fs.readFile(filename, 'utf8', function(err, data) {
        if (err) throw err;
        const splitData = data.split('\n');
        splitData.forEach((argu) => {
            executeData(argu);
        });
    });
}


// if (process.argv.length < 2) {
//     const rl = readline.createInterface({
//         input: process.stdin,
//         output: process.stdout,
//         terminal: false
//     });

//     rl.on('line', function(cmd) {
//         const spliData = cmd.split(' ');
//         if (spliData.length === 1) {
//             checkSingleArgument(spliData[0]);
//         } else {
//             checkMultipleArguments(spliData);
//         }
//     });
//     console.log('Usage: node ' + process.argv[1] + ' FILENAME');
// } else {
// var fs = require('fs'),
//     filename = process.argv[2];
// fs.readFile(filename, 'utf8', function(err, data) {
//     if (err) throw err;
//     console.log('OK: ' + filename);
//     const splitData = data.split("\n");
//     console.log(splitData);
// });


// console.log(process.argv.length, 'sadasd')
// const rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout,
//     terminal: false
// });

// rl.on('line', function(cmd) {
//     const spliData = cmd.split(' ');
//     if (spliData.length === 1) {
//         checkSingleArgument(spliData[0]);
//     } else {
//         checkMultipleArguments(spliData);
//     }
// });

let globalData = [];

function createParkingLot(number) {
    if (globalData.length > 0) {
        console.log('You have created parking lot, please reset first to create new (use -> "reset")');
        return;
    }

    if (Number(number) > 0) {
        for (let i = 0; i < Number(number); i++) {
            globalData.push(null);
        }
        // globalData.length = Number(number);
        console.log('Created a parking lot with ' + number + ' slots');
    } else {
        console.log('Please input number data correctly and more than 0');
    }
}

function parking(registration, colour = 'unknown') {
    if (!isCreated()) return;
    let dataFilled = false;
    globalData.some((data, index) => {
        if (!data) {
            globalData[index] = [registration, colour];
            console.log('Allocated slot number: ' + (Number(index) + 1));
            dataFilled = true;
        }
        return dataFilled;
    });
    if (dataFilled) return;
    console.log('Sorry, parking lot is full');
}

function leavePark(number) {
    if (!isCreated()) return;
    const numberSlot = Number(number);
    if (numberSlot > 0) {
        globalData[numberSlot - 1] = null;
        console.log('Slot number ' + number + ' is free')
    } else {
        console.log('Please use correct slot number');
    }
}

function registrationNumberCarWithColour(colour) {
    if (!isCreated()) return;
    let dataFilter = [];
    const filterAvailableData = globalData.filter((data) => data !== null);
    filterAvailableData.forEach((data) => {
        if (data[1].toLowerCase() === colour.toLowerCase()) {
            dataFilter.push(data[0]);
        }
    })
    if (dataFilter.length > 0) {
        console.log(dataFilter.join(', '))
    } else {
        console.log('Not found')
    }
}

function slotNumberCarWithColour(colour) {
    if (!isCreated()) return;
    let dataFilter = [];
    const filterAvailableData = globalData.filter((data) => data !== null);
    filterAvailableData.forEach((data, index) => {
        if (data[1].toLowerCase() === colour.toLowerCase()) {
            dataFilter.push((Number(index) + 1));
        }
    })
    if (dataFilter.length > 0) {
        console.log(dataFilter.join(', '))
    } else {
        console.log('Not found')
    }
}

function slotNumberCarWithRegistration(registration) {
    if (!isCreated()) return;
    let dataFilled = false;
    const filterAvailableData = globalData.filter((data) => data !== null);
    filterAvailableData.some((data, index) => {
        if (data[0].toUpperCase() === registration.toUpperCase()) {
            console.log(Number(index) + 1);
            dataFilled = true;
            return dataFilled;
        }
    })
    if (dataFilled) return;
    console.log('Not found')
}

function checkMultipleArguments(data) {

    switch (data[0]) {
        case 'create_parking_lot':
            createParkingLot(data[1]);
            break;
        case 'park':
            parking(data[1], data[2]);
            break;
        case 'leave':
            leavePark(data[1]);
            break;
        case 'registration_numbers_for_cars_with_colour':
            registrationNumberCarWithColour(data[1]);
            break;
        case 'slot_numbers_for_cars_with_colour':
            slotNumberCarWithColour(data[1]);
            break;
        case 'slot_number_for_registration_number':
            slotNumberCarWithRegistration(data[1]);
            break;
        default:
            console.log('Command is not found please check list command using "help"');
    }
}

function tableHelp() {
    const dataHelp = [
        ['create_parking_lot $total', 'for creating total of area park'],
        ['park $plat-number $color', 'for parking new vehicle'],
        ['leave $number', 'for leaveing vehicle to the park'],
        ['registration_numbers_for_cars_with_colour $color', 'for checking registration number of car based on color'],
        ['slot_numbers_for_cars_with_colour $color', 'for checking list slot number of cars in the park using color'],
        ['slot_number_for_registration_number $plat-number ', 'for checking number slot of cars in the park using plat-number'],
        ['help', 'for showing list of command provided'],
        ['status', 'for checking current slot of park'],
        ['reset', 'for reseting current slot of park'],
        ['exit', 'for exit the program'],
    ]
    const table = new Table({
        head: ['Command', 'Description'],
        colWidths: [60, 80]
    });
    table.push(
        ...dataHelp
    );
    console.log(table.toString());
}

function isCreated() {
    if (globalData.length < 1) {
        console.log('Please create slot of park first(ex: "create_parking_lot 5")');
        return false;
    }
    return true;
}

function tableStatus() {
    const dataStatus = [];
    if (!isCreated()) return;
    globalData.forEach((data, index) => {
        if (data) {
            dataStatus.push([Number(index) + 1, data[0], data[1]])
        }
    })
    const table = new Table({
        head: ['Slot no.', 'Registration no.', 'Colour'],
        colWidths: [20, 40, 30]
    });
    table.push(
        ...dataStatus
    );
    console.log(table.toString());
}

function resetSlot() {
    globalData = [];
    console.log('Your parking lot reseted successfully');
}

function checkSingleArgument(data) {

    switch (data) {
        case 'status':
            tableStatus();
            break;
        case 'help':
            tableHelp();
            break;
        case 'reset':
            resetSlot();
            break;
        case 'exit':
            console.log('Goodbye...!');
            rl.close();
            break;
        default:
            console.log('Command is not found please check list command using "help"');
    }
}